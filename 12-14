3.
#include <iostream>
#include <cstring>
bool is_holenum(int x);
int findmax(int x, int y, int z);
int findmin(int x, int y, int z);
int minnum(int x);
int maxnum(int x);
using namespace std;
int main()
{
	int n, new_num = 0, numlist[10] = { 0 },count=0;
	cin >> n;
	int l = n;
	while (l > 0)
	{
		count ++;
		l = l / 10;
	}
	l = n;
	if (is_holenum(n)&&count==3)
	{
		numlist[0] = n;
		for (int i = 1; i <= 7; i++)
		{
			if (n == 495)
			{
				cout << "495";
				break;
			}
			new_num = maxnum(l) - minnum(l);
			numlist[i] = new_num;
			if (new_num == 495)
			{
				cout << numlist[0];
				for (int j = 1; j <= i; j++)
				{
					cout<<"-"<<numlist[j];
				}
				break;
			}
			l = new_num;
		}
		 
	}
	else cout << "NO";

	return 0;

}
bool is_holenum(int x)
{
	int curr = 0, prev = 0, count = 0;
	for (int i = 1; i <= 3; i++)
	{
		curr = x % 10;
		if (curr == prev)
			count ++;
		prev = curr;
		x = (x - x % 10) / 10;
		 
	}
	if (count == 2)
		return false;
	return true;
}
int findmax(int x, int y, int z)
{
	if (x >= y && x >= z)
		return x;
	else if (y > x && y >= z)
		return y;
	else if (z > x && z > y)
		return z;

}
int findmin(int x, int y, int z)
{
	if (x <= y && x <= z)
		return x;
	else if (y < x && y <= z)
		return y;
	else if (z < x && z < y)
		return z;


}
int minnum(int x)
{
	int p[3] = { 0 }, q = x;
	for (int i = 0; i < 3; i++)
	{
		p[i] = q % 10;
		q = (q - q % 10) / 10;
	}
	return findmin(p[0], p[1], p[2]) * 100 + findmax(p[0], p[1], p[2]) + (p[0] + p[1] + p[2] - findmin(p[0], p[1], p[2]) - findmax(p[0], p[1], p[2]))*10;

}
int maxnum(int x)
{
	int p[3] = { 0 }, q = x;
	for (int i = 0; i < 3; i++)
	{
		p[i] = q % 10;
		q = (q - q % 10) / 10;
	}
	return findmax(p[0], p[1], p[2]) * 100 + findmin(p[0], p[1], p[2]) + (p[0] + p[1] + p[2] - findmin(p[0], p[1], p[2]) - findmax(p[0], p[1], p[2])) * 10;


}

第二种解法
#include <iostream>
#include <cstring>
bool is_holenum(int x);
int findmax(int x, int y, int z);
int findmin(int x, int y, int z);
int minnum(int x);
int maxnum(int x);
void newnumber(int n);
using namespace std;
int main()
{
	int n, new_num = 0, numlist[10] = { 0 }, count = 0;
	cin >> n;
	newnumber(n);
	return 0;

}
bool is_holenum(int x)
{
	int curr = 0, prev = 0, count = 0;
	for (int i = 1; i <= 3; i++)
	{
		curr = x % 10;
		if (curr == prev)
			count++;
		prev = curr;
		x = (x - x % 10) / 10;

	}
	if (count == 2)
		return false;
	return true;
}
int findmax(int x, int y, int z)
{
	if (x >= y && x >= z)
		return x;
	else if (y > x && y >= z)
		return y;
	else if (z > x && z > y)
		return z;

}
int findmin(int x, int y, int z)
{
	if (x <= y && x <= z)
		return x;
	else if (y < x && y <= z)
		return y;
	else if (z < x && z < y)
		return z;


}
int minnum(int x)
{
	int p[3] = { 0 }, q = x;
	for (int i = 0; i < 3; i++)
	{
		p[i] = q % 10;
		q = (q - q % 10) / 10;
	}
	return findmin(p[0], p[1], p[2]) * 100 + findmax(p[0], p[1], p[2]) + (p[0] + p[1] + p[2] - findmin(p[0], p[1], p[2]) - findmax(p[0], p[1], p[2])) * 10;

}
int maxnum(int x)
{
	int p[3] = { 0 }, q = x;
	for (int i = 0; i < 3; i++)
	{
		p[i] = q % 10;
		q = (q - q % 10) / 10;
	}
	return findmax(p[0], p[1], p[2]) * 100 + findmin(p[0], p[1], p[2]) + (p[0] + p[1] + p[2] - findmin(p[0], p[1], p[2]) - findmax(p[0], p[1], p[2])) * 10;


}
void newnumber(int n)
{
	int l, length, new_num = n, p[10] = { 0 };
	
	p[0] = new_num;
	for (int j = 1; j <= 7; j++)
	{
		length = 0;
		l = new_num;
		while (l > 0)
		{
			length += 1;
			l /= 10;
		}
		l = new_num;
		if (n == 495)
		{
			cout << "495";
			break;
		}
		if (is_holenum(n) && length == 3)
		{
			new_num = maxnum(l) - minnum(l);
			p[j] = new_num;
			if (new_num == 495)
			{
				cout << p[0];
				for (int f = 1; f <= j; f++)
				{
					cout << "-" << p[f];
				}
				break;
			}
		}
		else
		{
			cout << "NO";
			break;
		}
	}


}
