1.

#include<iostream>
#include<cstring>
void swap(int *begin, int *end, char A[]);
const int MAX = 1000;
using namespace std;
int main()
{
    char s[MAX];
	int begin=0,end=0;
	cins;
	cout << s;
	for (int j = 0; s[j]!='\0'; j++)
	{
		if((s[j] == ' '))
		{
			end = j - 1;
			swap(&begin, &end, s);
			begin = j + 1;
		}

	}
	cout << s;
	return 0;
}
void swap(int *begin, int *end, char A[])
{
	char temp=A[*begin];
	int a = *begin, b = *end;
	while (a> b)
	{
		temp=A[*begin];
		A[*begin]=A[*end];
		A[*end] = temp;
	    a--;
		b++;
	}
  
 
#用python寫的一個版本
def func(s):
    if len(s) < 1:
        return s
    return func(s[1:]) + s[0]


a = input()
i, b, e, p = 0, 0, 0, ""
while i < len(a):
    if a[i] == ' ':
        e = i
        p = p + func(a[b:e])+" "
        b = i + 1
    if i == len(a)-1:
        e = i
        p = p + a[len(a)-1] + func(a[b:e])
    i += 1
print(p)
	






}

2.输入一个正整数n(0 < n <= 33)，打印杨辉三角的前n行，输出共n行，第i行输出代表杨辉三角的第i行，
同一行不同元素之间以空格隔开
#include<iostream>
const int MAX = 40;
using namespace std;
int main()
{
	int A[MAX][MAX] = { 0 };
	int n,j;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		for (j = 0; j <= i; j++)
		{
			if (j == 0)
			{
				A[i][j] = 1;
				 
			}
			else if (j == i)
			{
				A[i][j] = 1;
			}
			else
			{
				A[i][j] = A[i - 1][j - 1] + A[i - 1][j];
				 
			}
			
			if(i==j)
			{
				cout << A[i][j] << endl;
			}
			else
			{
				cout << A[i][j]<<" ";
			}
			 
		}
	}
	return 0;
}

3.
#include <iostream>
const int MAX = 101;
using namespace std;
int main()
{
	int n, A[MAX][MAX] = { 0 }, B[MAX] = { 0 }, C[MAX] = { 0 }, D[MAX] = { 0 } ,sum, count = 0, i_2 = 0, j_2 = 0, i, count_2 = 0;
	while (scanf_s("%d", &n)&&n)
	{
		count=0;
		i_2 = 0;
		j_2 = 0;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> A[i][j];
			}
		}
		for (int i = 0; i < n; i++)
		{
			sum = 0;
			for (int j = 0; j < n; j++)
			{
				sum += A[i][j];
			}
			if (sum % 2 == 0)
			{
				count++;
			}
			else
			{
				i_2 = i + 1;
			}
		}
		for (int j = 0; j < n; j++)
		{
			sum = 0;
			for (i = 0; i < n; i++)
			{
				sum += A[i][j];
			}
			if (sum % 2 == 0)
			{
				count++;
			}
			else
			{
				j_2 = j + 1;
			}
		}
		if (count == n * 2)
		{
			B[count_2] = 1;
				 
		}
		else if (count == n * 2 - 2 && i_2 != 0 && j_2 != 0)
		{
			B[count_2] = 2;
			C[count_2] = i_2;
			D[count_2] = j_2;
			 

		}
		else
		{
			B[count_2] = 3;
		 
		}
		 
		count_2++;
	}
	for (int i = 0; i < count_2; i++)
	{
		if(B[i]==1)
		{
			printf("OK\n\n");
		}
		else if (B[i]== 2)
		{
			printf("Change bit (%d,%d)\n\n", C[i],D[i]);
		 }
		else
		{
			printf("Corrupt\n\n");
		}
	}
	
  #include <iostream>
const int MAX = 100;
using namespace std;
int main()
{
	int n, A[MAX][MAX] = { 0 }, B[MAX] = { 0 }, C[MAX] = { 0 }, D[MAX] = { 0 }, sum, count = 0, i_2 = 0, j_2 = 0, i,j, count_2 = 0;
	while (scanf_s("%d", &n) && n)
	{
		count = 0;
		i_2 = 0;
		j_2 = 0;
		for (i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> A[i][j];
			}
		}
		for (i = 0; i < n; i++)
		{
			sum = 0;
			for (j = 0; j < n; j++)
			{
				sum += A[i][j];
			}
			if (sum % 2 == 0)
			{
				count++;
			}
			else
			{
				i_2 = i + 1;
			}
		}
		for (j = 0; j < n; j++)
		{
			sum = 0;
			for (i = 0; i < n; i++)
			{
				sum += A[i][j];
			}
			if (sum % 2 == 0)
			{
				count++;
			}
			else
			{
				j_2 = j + 1;
			}
		}
		if (count == n * 2)
		{
			B[count_2] = 1;

		}
		else if (count == n * 2 - 2 && i_2 != 0 && j_2 != 0)
		{
			B[count_2] = 2;
			C[count_2] = i_2;
			D[count_2] = j_2;


		}
		else
		{
			B[count_2] = 3;

		}

		count_2++;
	}
	for (int i = 0; i < count_2; i++)
	{
		if (B[i] == 1)
		{
			printf("OK\n");
		}
		else if (B[i] == 2)
		{
			printf("Change bit(%d,%d)\n", C[i], D[i]);
		}
		else
		{
			printf("Corrupt\n");
		}




	}




	return 0;

}
	
	



}

4.
思路：按列來看 每一個對應的水量對於左右兩邊最大高度中較小的一個減去本身高度
#include<iostream>
const int MAX = 3001;
int min(int x, int y);
using namespace std;
int main()
{
	int n, A[MAX] = {0},sum=0,max_num_left,max_num_right;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> A[i];
	}
	for (int i = 1; i < n-1; i++)
	{
		max_num_left = A[0];
		max_num_right = A[n-1];
		for (int j = 0; j < i; j++)
		{
			if (A[j] > max_num_left)
			{
				max_num_left = A[j];
			}
		 }
		for (int j = i+1; j<n; j++)
		{
			if (A[j] > max_num_right)
			{
				max_num_right = A[j];
			}
		}
		if (A[i] < max_num_right && A[i] < max_num_left)
			sum += min(max_num_left, max_num_right) - A[i];
	}
	cout << sum;
}
int min(int x, int y)
{
	if (x >= y)return y;
	else
		return x;
}
